apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: igc-build-tag-push-v1-2-0
  namespace: dev-gan2
spec:
  inputs:
    params:
    - default: docker.io/node:12-stretch
      name: js-image
      type: string
    - default: quay.io/buildah/stable:v1.11.0
      name: BUILDER_IMAGE
      type: string
    - default: docker.io/aquasec/trivy
      name: trivy
      type: string
    - default: ./Dockerfile
      name: DOCKERFILE
      type: string
    - default: .
      name: CONTEXT
      type: string
    - default: "false"
      name: TLSVERIFY
      type: string
    resources:
    - name: source
      type: git
  outputs:
    resources:
    - name: image
      type: image
  steps:
  - args:
    - -c
    - |
      set -e

      echo "Test 1  1 --->"


      if [[ -z "$GIT_AUTH_USER" ]] || [[ -z "$GIT_AUTH_PWD" ]]; then
        echo "Git credentials not found. The pipeline expects to find them in a secret named 'git-credentials'."
        echo "  Update your CLI and register the pipeline again"
        exit 1
      fi
      echo "Test 1  2 --->"

      echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
      git fetch --unshallow
      git fetch --tags
      git tag -l
      echo "Test 1  3 --->"

      git checkout ${BRANCH}
      git branch --set-upstream-to=origin/${BRANCH} ${BRANCH}
      echo "Test 1  4 --->"

      git config --global user.email "cloud-native-toolkit@example.com"
      git config --global user.name "Cloud Native Toolkit Pipeline"
      echo "Test 1  5 --->"

      if [[ "${BRANCH}" == "master" ]] && [[ $(git describe --tag `git rev-parse HEAD`) =~ (^[0-9]+.[0-9]+.[0-9]+$) ]] || \
         [[ $(git describe --tag `git rev-parse HEAD`) =~ (^[0-9]+.[0-9]+.[0-9]+-${BRANCH}[.][0-9]+$) ]]
      then
          echo "Latest commit is already tagged"
          echo "IMAGE_NAME=$(basename -s .git `git config --get remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" > ./env-config
          echo "IMAGE_VERSION=$(git describe --abbrev=0 --tags)" >> ./env-config
          exit 0
      fi
      echo "Test 1  6 --->"

      mkdir -p ~/.npm
      npm config set prefix ~/.npm
      export PATH=$PATH:~/.npm/bin
      npm i -g release-it
      echo "Test 1  7 --->"

      if [[ "${BRANCH}" != "master" ]]; then
          PRE_RELEASE="--preRelease=${BRANCH}"
      fi
      echo "Test 1  8 --->"


      release-it patch ${PRE_RELEASE} \
        --ci \
        --no-npm \
        --no-git.push \
        --no-git.requireCleanWorkingDir \
        --verbose \
        -VV

      git push --follow-tags -v

      echo "IMAGE_VERSION=$(git describe --abbrev=0 --tags)" > ./env-config
      echo "IMAGE_NAME=$(basename -s .git `git config --get remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" >> ./env-config
      echo "Test 1  9 --->"

      source ./env-config
      if [[ -z "${IMAGE_VERSION}" ]]; then
          echo "Error: IMAGE_VERSION not defined"
          exit 1
      fi
      echo "Test 1  10 --->"

      if [[ -z "${IMAGE_NAME}" ]]; then
          echo "Error: IMAGE_NAME not defined"
          exit 1
      fi
      echo "Test 1  11 --->"

    command:
    - /bin/bash
    env:
    - name: BRANCH
      value: $(inputs.resources.source.revision)
    - name: GIT_AUTH_USER
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    - name: GIT_AUTH_PWD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    image: $(inputs.params.js-image)
    name: tag-release
    resources: {}
    workingDir: $(inputs.resources.source.path)
  - args:
    - -c
    - |
      set -e
      echo "Test 2  1 --->"

      . ./env-config

      IMAGE_URL=$(outputs.resources.image.url)
      echo "Test 2  2 --->"

      REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
      REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')
      echo "Test 2  3 --->"

      APP_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}"
      echo "Test 2  4 --->"

      buildah bud --tls-verify=$(inputs.params.TLSVERIFY) --format=docker -f $(inputs.params.DOCKERFILE) -t ${APP_IMAGE}  $(inputs.params.CONTEXT)
      if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]]; then
        buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "${REGISTRY_URL}"
      fi
      echo "Test 2  5 --->"

      buildah push --tls-verify=$(inputs.params.TLSVERIFY) "${APP_IMAGE}" "docker://${APP_IMAGE}"
    command:
    - /bin/bash
    env:
    - name: REGISTRY_USER
      valueFrom:
        secretKeyRef:
          key: REGISTRY_USER
          name: ibmcloud-apikey
          optional: true
    - name: REGISTRY_PASSWORD
      valueFrom:
        secretKeyRef:
          key: APIKEY
          name: ibmcloud-apikey
          optional: true
    image: $(inputs.params.trivy)
    name: build
    resources: {}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(inputs.resources.source.path)
  # - args:
  #   - -c
  #   - |
  #     set -e

  #     . ./env-config

  #     IMAGE_URL=$(outputs.resources.image.url)

  #     REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
  #     REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')

  #     APP_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}"

  #     export TRIVY_AUTH_URL=${REGISTRY_URL}
  #     export TRIVY_USERNAME=${REGISTRY_USER}
  #     export TRIVY_PASSWORD=${REGISTRY_PASSWORD}

  #     echo "ScanImage Before Trivy image scanning.... $APP_IMAGE"

  #     # Trivy scan
  #     trivy ${APP_IMAGE}
  #     # trivy --exit-code 1 --severity CRITICAL ${APP_IMAGE}

  #     # Trivy scan result processing
  #     my_exit_code=$?
  #     echo "RESULT 1:--- $my_exit_code"

  #     # Check scan results
  #     if [ ${my_exit_code} == 1 ]; then
  #         echo "Image scanning failed. Some vulnerabilities found"
  #         exit 1;
  #     else
  #         echo "Image is scanned Successfully. No vulnerabilities found"
  #     fi;

  #     echo "ScanImage After Trivy image scanning....0"
  #   command:
  #   - /bin/sh
  #   env:
  #   - name: REGISTRY_USER
  #     valueFrom:
  #       secretKeyRef:
  #         key: REGISTRY_USER
  #         name: ibmcloud-apikey
  #         optional: true
  #   - name: REGISTRY_PASSWORD
  #     valueFrom:
  #       secretKeyRef:
  #         key: APIKEY
  #         name: ibmcloud-apikey
  #         optional: true
  #   image: $(inputs.params.BUILDER_IMAGE)
  #   name: image-scan
  #   resources: {}
  #   securityContext:
  #     privileged: true
  #   volumeMounts:
  #   - mountPath: /var/lib/containers
  #     name: varlibcontainers
  #   workingDir: $(inputs.resources.source.path)
  volumes:
  - emptyDir: {}
    name: varlibcontainers
